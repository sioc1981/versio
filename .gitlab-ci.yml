stages:
#  - build
#  - test
  - package
  - deploy

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  CLI_VERSION: 6.2.1
  OPENSHIFT_SERVER: "https://api.us-east-2.online-starter.openshift.com:6443"
  OPENSHIFT_DOMAIN: "apps.us-east-2.online-starter.openshift.com"

cache:
  paths:
    - $CI_PROJECT_DIR/.m2/repository/
    - backend/target/
    - frontend/node_modules/

#build-backend:
#  stage: build
#  image: maven:latest
#  script:
#    - cd backend
#    - mvn $MAVEN_CLI_OPTS compile

#build-frontend:
#  stage: build
#  image: trion/ng-cli
#  before_script:
#    - cd frontend
#    - npm ci
#  script:
#    - rm -f dist/frontend
#    - ng build

#test-backend:
#  stage: test
#  image: maven:latest
#  script:
#    - cd backend
#    - mvn $MAVEN_CLI_OPTS test

#test-frontend:karma:
#  stage: test
#  image: trion/ng-cli-karma:${CLI_VERSION}
#  allow_failure: false
#  before_script:
#    - cd frontend
#  script:
#    - ng test --no-watch --no-progress --browsers=ChromeHeadlessCI

package-backend:
  stage: package
  image: maven:latest
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS package
  artifacts:
    paths:
      - backend/target/*.war

package-frontend:
  stage: package
  image: trion/ng-cli
  before_script:
    - cd frontend
    - npm ci
  script:
    - rm -f dist/frontend
    - ng build --progress false --prod
  artifacts:
    paths:
     - frontend/dist/frontend.war

deploy-versioning:
  stage: deploy
  image: ebits/openshift-client
  variables:
    APP: versioning
    APP_HOST: $CI_PROJECT_NAME.$OPENSHIFT_DOMAIN
  before_script:
    - "echo OPENSHIFT_SERVER: $OPENSHIFT_SERVER"
    - "echo OPENSHIFT_TOKEN: $OPENSHIFT_TOKEN"
    - wget https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.1/linux/oc.tar.gz
    - tar x -f oc.tar.gz
    - echo $PATH
    - ls -l
    - cp oc /usr/bin
    - oc login --server="$OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
  script:
    - mkdir -p deployments
    - cp -r frontend/dist/frontend.war deployments/
    - cp -r backend/target/*.war deployments/
    - ls -la build
    - "oc get services $APP 2> /dev/null || oc new-app . --name=$APP --strategy=docker"
    - "oc start-build $APP --from-dir=build/ --follow || sleep 3s && oc start-build $APP --from-dir=. --follow"
    - "oc get routes $APP 2> /dev/null || oc expose service $APP --hostname=$APP_HOST"
    - "echo end"
